train_task1 = makeRegrTask(id = 'train', data = train1, target = 'func1')
train_task2 = makeRegrTask(id = 'train', data = train2, target = 'func2')
rf_learner = makeLearner(cl = "regr.randomForest")
#Creating 5-fold Cross Validation
rdesc = makeResampleDesc("CV", iters = 5L)
#Creating a parameter set for the XGBoost learner
rf_params <- makeParamSet(
# The number of trees in the model (each one built sequentially)
makeIntegerParam("ntree", lower = 300, upper = 700),
# Number of observations in the terminal nodes
makeIntegerParam("nodesize", lower = 1, upper = 10),
# Number of variables to be selected at a node split
makeIntegerParam("mtry", lower = 2, upper = 10)
)
#Define how to search through the parameter set
ctrl = makeTuneControlRandom(maxit=5L)
#ctrl = makeTuneControlGrid()
#Fine Tuning the Models for both functions based on param set
res1 = tuneParams("regr.randomForest", task = train_task1, resampling = rdesc,
par.set = rf_params, control = ctrl)
res2 = tuneParams("regr.randomForest", task = train_task2, resampling = rdesc,
par.set = rf_params, control = ctrl)
#Setting the parameter for XGBooster which is selected as best from fine tuning
lrn1 = setHyperPars(makeLearner("regr.randomForest"), par.vals = res1$x)
lrn2 = setHyperPars(makeLearner("regr.randomForest"), par.vals = res2$x)
#Retrain models based on optimal hyperparamsets
mod1 = mlr::train(learner = lrn1, task = train_task1)
mod2 = mlr::train(learner = lrn2, task = train_task2)
#Predict the targets in the initial train task
pred1 = predict(mod1, newdata = test1)
print(performance(pred=pred1, measures=list(mse)))
pred2 = predict(mod2, newdata = test2)
print(performance(pred=pred2, measures=list(mse)))
#Creating one dataframe with predictions for both functions
new_pred1 = pred1$data$response
new_pred2 = pred2$data$response
df = data.frame(new_pred1, new_pred2)
return(df)
return(mod1)
return(mod2)
}
fr = rfModel(dataframe)
###Master###
source("sourcer.R")
base="optim.uni-muenster.de:5000/"
token="866de98d0d47426e92cc0e3394df5f07"
endpoint = "api-test2D"
dimensions = 2
batchSize = 50
MU = 30L; LAMBDA = 5L; MAX.ITER = 200L
algos = c("SVM", "XGB", "RF", "ANN", "KNN")
#all operations of the data take place here
#no external data may be generated - functional proramming; all data need to be returned to the master layer
#import data and build dataframe for observations and the two target variables.
dataframe = generateDataFrames(endpoint = endpoint, batchSize = batchSize, loops = 40, base = base,
token = token, dimensions = dimensions, sample = "random")
#visualise these datapoints in a 3D explorable space.
visualiseDatapoints(dataframe = dataframe, dimensions = dimensions, mode = "all")
#create surrogate models for both functions
xgboost = XGBoostModel(dataframe)
fr = rfModel(dataframe)
#svm = svmModel(dataframe)
#keras = kerasModel(dataframe)
#Benchmark results
#bmr = benchmark(lrns, task_dummy, rdesc.bs, measures = list(mmce, acc))
#print(bmr)
#plotBMRBoxplots(bmr)
#rmat = convertBMRToRankMatrix(bmr)
#print(rmat)
write.csv(dataframe,'C:\\Users\\Raghav\\Desktop\\MyData.csv', row.names = FALSE)
dataframe = read.csv('MyData.csv')
library(reticulate)
source('non_dominated_sort.R')
use_python("/usr/local/bin/python")
source_python('nsga.py')
use_python("/usr/local/bin/python")
source_python('nsga.py')
head(dataframe)
indices = exec(dataframe$func1[1:100] , dataframe$func2[1:100])
indices = c(unlist(indices))
indices
sapply(indices , function(x){
print(x)
})
sapply(indices , function(x){
x = x+1
})
indices = sapply(indices , function(x){
x = x+1
})
indices
indices = exec(dataframe$func1[1:100] , dataframe$func2[1:100])
indices = c(unlist(indices))
indices
indices = sapply(indices , function(x){
x = x+1
})
indices
dataframe[indices,]
df = dataframe[indices,]
library(ggplot2)
ggplot(data = df , mapping = aes(x = df$func1,y = df$func2)) + geom_point()
ggplot(data = df , mapping = aes(x = df$func1[1:50],y = df$func2[1:50])) + geom_point()
ggplot(data = df[1:50,] , mapping = aes(x = df$func1,y = df$func2)) + geom_point()
df = dataframe[indices,]
ggplot(data = df[1:50,] , mapping = aes(x = df$func1[1:50],y = df$func2[1:50])) + geom_point()
###Master###
#setwd("C:/Users/felix/Google Drive/Master/WWU/Data Analytics 2/MultObjOptimisation")
source("sourcer.R")
base="optim.uni-muenster.de:5000/"
token="866de98d0d47426e92cc0e3394df5f07"
batchSize=50
dimensions = 2
if(dimensions == 3){
endpoint = "api-test3D"
}
if(dimensions == 2) {
endpoint = "api-test2D"
}
#import data and build dataframe for observations and the two target variables.
dataframe = generateDataFrames(endpoint = endpoint, batchSize = batchSize, loops = 20, base = base,
token = token, dimensions = dimensions, sample = "intelligent")
#import data and build dataframe for observations and the two target variables.
dataframe = generateDataFrames(endpoint = endpoint, batchSize = batchSize, loops = 100, base = base,
token = token, dimensions = dimensions, sample = "intelligent")
#Generate train-test split for model training and tuning
split = split(df = dataframe, dimensions = dimensions)
train1 = as.data.frame(split[1])
test1 = as.data.frame(split[2])
train2 = as.data.frame(split[3])
test2 = as.data.frame(split[4])
#Train surrogate models for both functions including hyperparameter tuning and receive predictions on the test set
#install_tensorflow(version = "1.12")
ann = kerasModel(train1, train2, test1, test2, dimensions = dimensions)
xgboost = XGBoostModel(train1, train2, test1, test2)
svm = svmModel(train1, train2, test1, test2)
knn = knnModel(train1, train2, test1, test2)
#Create data frame for comparing the different models
surrogate1 = assessPerformance(ann, knn, svm, xgboost, rf, surrogate = 1)
surrogate2 = assessPerformance(ann, knn, svm, xgboost, rf, surrogate = 2)
source("sourcer.R")
knn = knnModel(train1, train2, test1, test2)
rf = rfModel(train1, train2, test1, test2)
xgboost = XGBoostModel(train1, train2, test1, test2)
#Create data frame for comparing the different models
surrogate1 = assessPerformance( knn, svm, surrogate = 1)
surrogate2 = assessPerformance( knn, svm, surrogate = 2)
svm
svm[1][1]
head(dataframe)
dim(dataframe)
indices = exec(dataframe$func1[1:1128] , dataframe$func2[1:1128])
indices = c(unlist(indices))
indices
indices = sapply(indices , function(x){
x = x+1
})
indices
df = dataframe[indices,]
ggplot(data = df[1:50,] , mapping = aes(x = df$func1[1:50],y = df$func2[1:50])) + geom_point()
ggplot(data = df[50:100,] , mapping = aes(x = df$func1[1:50],y = df$func2[1:50])) + geom_point()
ggplot(data = df[50:100,] , mapping = aes(x = df$func1[50:100],y = df$func2[50:100])) + geom_point()
df = dataframe[indices,]
indices
1
ggplot(data = df[1:50,] , mapping = aes(x = df$func1[1:50],y = df$func2[1:50])) + geom_point()
indices = exec(dataframe$func1[1:1128] , dataframe$func2[1:1128])
indices = c(unlist(indices))
indices = exec(dataframe$func1[1:100] , dataframe$func2[1:100])
indices = c(unlist(indices))
indices = exec(dataframe$func1[1:1000] , dataframe$func2[1:1000])
indices = c(unlist(indices))
indices
indices = exec(dataframe$func1[1:100] , dataframe$func2[1:100])
indices = c(unlist(indices))
indices
indices = sapply(indices , function(x){
x = x+1
})
indices
indices = exec(dataframe$func1[1:200] , dataframe$func2[1:200])
indices = c(unlist(indices))
indices = exec(dataframe$func1[1:500] , dataframe$func2[1:500])
indices = c(unlist(indices))
indices
indices = sapply(indices , function(x){
x = x+1
})
indices
df = dataframe[indices,]
library(ggplot2)
ggplot(data = df , mapping = aes(x = df$func1[1:50],y = df$func2[1:50])) + geom_point()
ggplot(data = df , mapping = aes(x = df$func1,y = df$func2)) + geom_point()
indices = exec(dataframe$func1[1:1128] , dataframe$func2[1:1128])
indices = c(unlist(indices))
indices
indices = exec(dataframe$func1[500:1128] , dataframe$func2[500:1128])
indices = c(unlist(indices))
indices
dataframe
dataframe
#import data and build dataframe for observations and the two target variables.
dataframe = generateDataFrames(endpoint = endpoint, batchSize = batchSize, loops = 100, base = base,
token = token, dimensions = dimensions, sample = "intelligent")
dataframe
dim(dataframe)
df[,c("x1","x2")]
dataframe = read.csv('MyData.csv')
View(dataframe)
View(dataframe)
indices = exec(dataframe$func1, dataframe$func2)
indices = exec(dataframe$func1[1:1000], dataframe$func2[1:1000])
indices = c(unlist(indices))
indices
indices = sapply(indices , function(x){
x = x+1
})
indices
df[,c("x1","x2")]
df[,c("x1","x2")] + rnorm(n = dim(df[,c("x1","x2")])[1],mean = 0,sd = 1)
rnorm(n = dim(df[,c("x1","x2")])[1],mean = 0,sd = 1)
rnorm(n = dim(1,mean = 0,sd = 1)
1
rnorm(n = 1,mean = 0,sd = 1)
r = rnorm(n = 1,mean = 0,sd = 1)
r
r = rnorm(n = 100,mean = 0,sd = 1)
r
ggplot(data = r , mapping = aes(y = r)) + geom_point()
ggplot(data = r , mapping = aes(x = 1:100,y = r)) + geom_point()
r
x = 1:100
x
data.frame(r,x)
d = data.frame(r,x)
ggplot(data = d , mapping = aes(x = x,y = r)) + geom_point()
r runif(n=100 , min = 0, max= 1)
d = data.frame(r,x)
ggplot(data = d , mapping = aes(x = x,y = r)) + geom_point()
r = runif(n=100 , min = 0, max= 1)
d = data.frame(r,x)
ggplot(data = d , mapping = aes(x = x,y = r)) + geom_point()
r = qnorm(p = 100, mean = 0 , sd = 1)
r
r = qnorm( mean = 0 , sd = 1)
r = qnorm(p= 1:100 mean = 0 , sd = 1)
r = qnorm(p= 1:100, mean = 0 , sd = 1)
r = pnorm(q= 1:100, mean = 0 , sd = 1)
r = pnorm(q =  1:100, mean = 0 , sd = 1)
r
r = dnorm(q =  1:100, mean = 0 , sd = 1)
r = dnorm(x = 1:100, mean = 0 , sd = 1)
r
r = dnorm(x = 1, mean = 0 , sd = 1)
r
r = dnorm(x = 100, mean = 0 , sd = 1)
r
r = dnorm(x = 0:1, mean = 0 , sd = 1)
r
r = dnorm(x = 1:100, mean = 0 , sd = 1)
r
d = data.frame(r,x)
ggplot(data = d , mapping = aes(x = x,y = r)) + geom_point()
r = dnorm(x = 1:100, mean = 0 , sd = 1)
r
d = data.frame(r,x)
ggplot(data = d , mapping = aes(x = x,y = r)) + geom_point()
seq(0,1,100)
x <- seq(0, 1, length=100)
y <- dnorm(x, mean=0.5, sd=1)
plot(x, y, type="l", lwd=1)
y
x <- seq(-1, 1, length=100)
y <- dnorm(x, mean=0, sd=1)
plot(x, y, type="l", lwd=1)
y
y <- dnorm(x, mean=0, sd=1)
plot(x, y, type="l", lwd=1)
y
r = rnorm(n = 100,mean = 0,sd = 1)
r
plot(x, r, type="l", lwd=1)
r = rnorm(n = 100,mean = 0,sd = 0.5)
plot(x, r, type="l", lwd=1)
r
r = rnorm(n = 100,mean = 0,sd = 1)
r
r = rnorm(n = 100,mean = 0,sd = 1)
r
r = rnorm(n = 100,mean = 0,sd = 0.75)
r
r
r >0.5
t[r >0.5]
r[r >0.5]
r = rnorm(n = 100,mean = 0,sd = 0.75)
r[r >0.5]
r = rnorm(n = 100,mean = 0,sd = 1)
r
r[r >0.5]
r = rnorm(n = 100,mean = 0,sd = 1)
r[r >0.5]
r = rnorm(n = 100,mean = 0,sd = 1)
r[r >0.5]
r[r >0.6]
r = rnorm(n = 100,mean = 0,sd = 1)
r[r >0.6]
r[r >1]
r[r >0]
r = rnorm(n = 100,mean = 0,sd = 1)
r[r >0]
mutation = function(output){
r = rnorm(n = dim(output)[1],mean = 0,sd = 1)
if(r > 0){
output = output[,c('x1')] + r
}else{
output = output[,c('x2')] + r
}
#df[,c("x1","x2")] + rnorm(n = dim(df[,c("x1","x2")])[1],mean = 0,sd = 1)
return(output)
}
df = dataframe[indices,]
df
mutation(output = df)
mutation = function(output){
r = rnorm(n = dim(output)[1],mean = 0,sd = 1)
if(r > 0){
output[,c('x1')]  = output[,c('x1')] + r
}else{
output[,c('x2')]  = output[,c('x2')] + r
}
#df[,c("x1","x2")] + rnorm(n = dim(df[,c("x1","x2")])[1],mean = 0,sd = 1)
return(output)
}
mutation(output = df)
df = dataframe[indices,c("x1","x2")]
df
mutation(output = df)
df = mutation(output = df)
svm[1]
svm[1][1]
predict(object = svm[1][1] , df)
library(mlr)
predict(object = svm[1][1] , df)
train_task1 = makeRegrTask(id = 'train1', data = df, target = 'func1' )
predict(object = svm[1][1] , df)
r
r[r>0]
r[r>0.4]
r[r<-0.6]
r[r< -0.6]
r[r < -0.6]
r[r < 0.6]
r[r>0.4]
r
r = rnorm(n = dim(output)[1],mean = 0,sd = 1)
r = rnorm(n = 100,mean = 0,sd = 1)
r
r[r < -0.6]
if(r > 0.4 ){
print("hihih")
output[,c('x1')]  = output[,c('x1')] + r
}else{
output[,c('x2')]  = output[,c('x2')] + r
}
mutation = function(output){
r = rnorm(n = dim(output)[1],mean = 0,sd = 1)
if(r > 0.4 ){
print("hihih")
output[,c('x1')]  = output[,c('x1')] + r
}else{
output[,c('x2')]  = output[,c('x2')] + r
}
#df[,c("x1","x2")] + rnorm(n = dim(df[,c("x1","x2")])[1],mean = 0,sd = 1)
return(output)
}
df = mutation(output = df)
mutation = function(output){
r = rnorm(n = dim(output)[1],mean = 0,sd = 1)
for (i in r) {
if(i > 0.6 ){
print("hihih")
output[,c('x1')]  = output[,c('x1')] + r
}else if (i < -0.4){
output[,c('x2')]  = output[,c('x2')] + r
}else{
output[,c('x2')]  = output[,c('x2')] + r
output[,c('x1')]  = output[,c('x1')] + r
}
}
#df[,c("x1","x2")] + rnorm(n = dim(df[,c("x1","x2")])[1],mean = 0,sd = 1)
return(output)
}
df = mutation(output = df)
df
mutation = function(output){
r = rnorm(n = dim(output)[1],mean = 0,sd = 1)
for (i in 1:length(r)) {
if(r[i] > 0.6 ){
print("hihih")
output[r[i],c('x1')]  = output[i,c('x1')] + r[i]
}else if (r[i] < -0.4){
output[i,c('x2')]  = output[i,c('x2')] + r[i]
}else{
output[i,c('x2')]  = output[i,c('x2')] + r[i]
output[i,c('x1')]  = output[i,c('x1')] + r[i]
}
}
#df[,c("x1","x2")] + rnorm(n = dim(df[,c("x1","x2")])[1],mean = 0,sd = 1)
return(output)
}
df = mutation(output = df)
df
df = dataframe[indices,c("x1","x2")]
df
df = mutation(output = df)
df
df = dataframe[indices,c("x1","x2")]
df
df1 = mutation(output = df)
View(df)
View(df)
View(df1)
View(df1)
mutation = function(output){
r = rnorm(n = dim(output)[1],mean = 0,sd = 1)
for (i in 1:length(r)) {
if(r[i] > 0.6 ){
print(i)
output[r[i],c('x1')]  = output[i,c('x1')] + r[i]
}else if (r[i] < -0.4){
output[i,c('x2')]  = output[i,c('x2')] + r[i]
}else{
output[i,c('x2')]  = output[i,c('x2')] + r[i]
output[i,c('x1')]  = output[i,c('x1')] + r[i]
}
}
#df[,c("x1","x2")] + rnorm(n = dim(df[,c("x1","x2")])[1],mean = 0,sd = 1)
return(output)
}
df = dataframe[indices,c("x1","x2")]
df
df1 = mutation(output = df)
View(df)
View(df)
View(df1)
View(df1)
i=0
while(1){
if(i>10){
break
}
print(i)
i = i+1
}
mutation = function(output){
r = rnorm(n = dim(output)[1],mean = 0,sd = 1)
for (i in 1:length(r)) {
if(r[i] > 0.6 ){
print(i)
while(1){
new  = output[i,c('x1')] + rnorm(n = 1,mean = 0,sd = 1)
if(new <=5 & new >=-5){
output[i,c('x1')] = new
break;
}
}
}
else if (r[i] < -0.4){
while(1){
new  = output[i,c('x2')] + rnorm(n = 1,mean = 0,sd = 1)
if(new <=5 & new >=-5){
output[i,c('x2')] = new
break;
}
}
}else{
while(1){
new1  = output[i,c('x1')] + rnorm(n = 1,mean = 0,sd = 1)
new2  = output[i,c('x2')] + rnorm(n = 1,mean = 0,sd = 1)
if(new1 <=5 & new1 >=-5){
output[i,c('x1')] = new1
break;
}
if(new2 <=5 & new2 >=-5){
output[i,c('x2')] = new2
break;
}
}
}
}
#df[,c("x1","x2")] + rnorm(n = dim(df[,c("x1","x2")])[1],mean = 0,sd = 1)
return(output)
}
df = dataframe[indices,c("x1","x2")]
df
df1 = mutation(output = df)
View(df)
View(df)
View(df1)
View(df1)
ggplot(data = df , mapping = aes(x = x,y = r)) + geom_point()
df
ggplot(data = df , mapping = aes(x = x1,y = x2)) + geom_point()
ggplot(data = df1 , mapping = aes(x = x1,y = x2)) + geom_point()
ggplot(data = df , mapping = aes(x = x1,y = x2)) + geom_point()
ggplot(data = df1 , mapping = aes(x = x1,y = x2)) + geom_point()
rnorm(n = 1,mean = 0,sd = 1)
rnorm(n = 1,mean = 0,sd = 1)
rnorm(n = 1,mean = 0,sd = 1)
rnorm(n = 1,mean = 0,sd = 1)
rnorm(n = 1,mean = 0,sd = 1)
